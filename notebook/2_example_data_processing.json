{
	"name": "2_example_data_processing",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p2sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5a6e1822-72d1-4888-839b-6fdd4802f67e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"3bd7fcb4-3afa-423e-8fe2-1d89b0dca153": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "2022",
										"1": "823PSCO2999",
										"2": "school@we.com",
										"3": "3281101",
										"5": "Community",
										"6": "Gillian Grosvenor",
										"7": "1",
										"8": "2018-11-06T17:45:59.131",
										"9": "Mrs G Grosvenor",
										"10": "WATERS EDGE PRIMARY SCHOOL",
										"11": "Primary",
										"12": "94DCB537A728268535BBD3CBA1C5A32D410C9704",
										"15": "852015",
										"17": "94DCB537A728268535BBD3CBA1C5A32D410C9704",
										"18": "3281101",
										"19": "3281101",
										"20": "2023-01-20 13:36:26"
									},
									{
										"0": "2022",
										"1": "823PSCO2999",
										"2": "school@we.com",
										"3": "3281101",
										"5": "Community",
										"6": "Gillian Grosvenor",
										"7": "1",
										"8": "2018-11-06T17:45:59.131",
										"9": "Mrs G Grosvenor",
										"10": "WATERS EDGE PRIMARY SCHOOL",
										"11": "Primary",
										"12": "94DCB537A728268535BBD3CBA1C5A32D410C9704",
										"15": "852015",
										"17": "94DCB537A728268535BBD3CBA1C5A32D410C9704",
										"18": "3281101",
										"19": "3281101",
										"20": "2023-01-22 05:35:01"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "CurrentAcademicYear",
										"type": "string"
									},
									{
										"key": "1",
										"name": "DeniNo",
										"type": "string"
									},
									{
										"key": "2",
										"name": "Email",
										"type": "string"
									},
									{
										"key": "3",
										"name": "EstabId",
										"type": "string"
									},
									{
										"key": "4",
										"name": "ExamCentre",
										"type": "string"
									},
									{
										"key": "5",
										"name": "Governance",
										"type": "string"
									},
									{
										"key": "6",
										"name": "Head",
										"type": "string"
									},
									{
										"key": "7",
										"name": "Id",
										"type": "string"
									},
									{
										"key": "8",
										"name": "LastUpdated",
										"type": "string"
									},
									{
										"key": "9",
										"name": "MainContact",
										"type": "string"
									},
									{
										"key": "10",
										"name": "Name",
										"type": "string"
									},
									{
										"key": "11",
										"name": "Phase",
										"type": "string"
									},
									{
										"key": "12",
										"name": "RowHash",
										"type": "string"
									},
									{
										"key": "13",
										"name": "SchoolLogoAlternateUrl",
										"type": "string"
									},
									{
										"key": "14",
										"name": "SchoolLogoUrl",
										"type": "string"
									},
									{
										"key": "15",
										"name": "Telephone",
										"type": "string"
									},
									{
										"key": "16",
										"name": "Web",
										"type": "string"
									},
									{
										"key": "17",
										"name": "Address",
										"type": "string"
									},
									{
										"key": "18",
										"name": "SchoolID",
										"type": "string"
									},
									{
										"key": "19",
										"name": "PartitionKey",
										"type": "string"
									},
									{
										"key": "20",
										"name": "rundate",
										"type": "timestamp"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/79a9a1b8-17c9-4098-bbae-16c21b7edd2a/resourceGroups/rg-oea-cbuk07/providers/Microsoft.Synapse/workspaces/syn-oea-cbuk07/bigDataPools/spark3p2sm",
				"name": "spark3p2sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-cbuk07.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p2sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Example data processing for xporter\n",
					"This example demonstrates how a data engineer utilizes OEA to work with data from a new data source."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run OEA_py"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Xporter_py"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 1) set the workspace (this determines where in the data lake you'll be writing to and reading from).\n",
					"# You can work in 'dev', 'prod', or a sandbox with any name you choose.\n",
					"# For example, Sam the developer can create a 'sam' workspace and expect to find his datasets in the data lake under oea/sandboxes/sam\n",
					"oea.set_workspace('oeadev')"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 2) Now land a batch data file into stage1 of the data lake.\n",
					"# In this example we pull a test csv data file from github and it is landed in oea/sandboxes/sam/stage1/Transactional/contoso/v0.1/students/delta_batch_data/rundate=<utc datetime>\n",
					"data = requests.get('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/day1/students/part1.csv').text\n",
					"#oea.land(data, 'contoso/v0.1/students', 'students.csv', oea.DELTA_BATCH_DATA)\n",
					"print(data)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def json_from_xporter(source_path, multiline):\r\n",
					"    print(source_path)\r\n",
					"    options = {'format':'json', 'multiline':multiline}\r\n",
					"    df = spark.read.load(source_path, **options)\r\n",
					"    return df"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_oea_path():\r\n",
					"    return 'abfss://oea@' + oea.storage_account + '.dfs.core.windows.net'"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"df = json_from_xporter(get_oea_path()+'/Transactional/xporter/3281101/SchoolInfo*', multiline = True)\r\n",
					"dfc = df.select(F.explode('SchoolInfo').alias('exploded_values')).select(\"exploded_values.*\")\r\n",
					"dfc.show()\r\n",
					"dfc = dfc.drop('Address')\r\n",
					"newdf = dfc.withColumn(\"Address\",col(\"RowHash\"))\r\n",
					"newdf = newdf.withColumn('SchoolID',lit('3281101'))\r\n",
					"newdf = newdf.withColumn('SchoolKey',lit('3281101'))\r\n",
					"newdf.show()\r\n",
					"csvString = newdf.toPandas().to_csv(index=False)\r\n",
					"oea.land(csvString, 'xporter/3281101/SchoolInfo', 'SchoolInfo.csv', oea.DELTA_BATCH_DATA)\r\n",
					"\r\n",
					" \r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# 3) You can verify that the data is in stage1 by reading it into a dataframe. Note that a \"rundate\" column has been added - representing the datetime that the batch data was landed in the data lake.\n",
					"df = oea.load_csv(f'stage1/Transactional/xporter/3281101/SchoolInfo')\n",
					"display(df)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 4) The next step is to ingest the batch data into stage2\n",
					"# Note that when you run this the first time, you'll see an info message like \"Number of new inbound rows processed: 2\".\n",
					"# If you run this a second time, the number of inbound rows processed will be 0 because the ingestion uses spark structured streaming to keep track of what data has already been processed.\n",
					"#oea.ingest(f'contoso/v0.1/students', 'SIS ID')\n",
					"oea.ingest(f'xporter/3281101/SchoolInfo', 'SchoolID')"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# 5) When data is ingested into stage2 of the data lake, OEA creates a lake db (which is a logical db that points to the data in the data lake).\n",
					"# In this example, since you are working in the 'sam' workspace, the lake db created is called 'ldb_sam_s2i_contoso_v0p1' (if you click on Data in the left nav, you'll see the db listed under 'Lake database' )\n",
					"#df = spark.sql(\"select * from ldb_sam_s2i_contoso_v0p1.students\")\n",
					"tbls = spark.sql(\"select * from ldb_oeadev_s2i_xporter.SchoolInfo\")\n",
					"tbls.show()\n",
					"#df = spark.sql(\"select * from ldb_prod_s2i_xporter.db\")\n",
					"#display(df)\n",
					"#df.printSchema()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 6) Now let's land some additional inbound batch data - with new and modified rows.\n",
					"data = requests.get('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/day2/students/part1.csv').text\n",
					"oea.land(data, 'contoso/v0.1/students', 'students.csv', oea.DELTA_BATCH_DATA)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 7) Ingest this latest batch of data.\n",
					"# Note that you don't have to specify what batch of data to process; OEA uses spark structured streaming to determine what files are new.\n",
					"oea.ingest(f'contoso/v0.1/students', 'SIS ID')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# 8) Now verify that the batch data was ingested and correctly merged with the previous data\n",
					"\n",
					"# You can load the ingested data into a dataframe directly like this...\n",
					"df = oea.load('stage2/Ingested/contoso/v0.1/students')\n",
					"display(df)\n",
					"\n",
					"# ...or you can use the automatically created \"Lake database\" like this:\n",
					"df = spark.sql(\"select * from ldb_sam_s2i_contoso_v0p1.students\")\n",
					"display(df)\n",
					"# with either approach, you're querying the same data - it's the data stored at oea/sandboxes/sam/stage2/Ingested/contoso/v0.1/students in your data lake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"xporter = Xporter()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# 9) After ingesting data, the next step is to refine the data through the use of metadata\n",
					"#metadata = oea.get_metadata_from_url('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/metadata.csv')\n",
					"print(xporter.schemas['schoolinfo'])\n",
					"oea.refine('xporter/3281101/SchoolInfo', xporter.schemas['schoolinfo'], 'SchoolID')\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# 10) Now you can query the refined data tables in the lake db\n",
					"df = spark.sql(\"select * from ldb_sam_s2r_contoso_v0p1.students\")\n",
					"display(df)\n",
					"df.printSchema()\n",
					"df = spark.sql(\"select * from ldb_sam_s2r_contoso_v0p1.students_lookup\")\n",
					"display(df)\n",
					"df.printSchema()\n",
					"# You can use the \"lookup\" table for joins (people with restricted access won't be able to perform this query because they won't have access to data in the \"sensitive\" folder in the data lake)\n",
					"df = spark.sql(\"select sl.Username, s.Grade from ldb_sam_s2r_contoso_v0p1.students_lookup sl, ldb_sam_s2r_contoso_v0p1.students s where sl.SIS_ID_pseudonym = s.SIS_ID_pseudonym\")\n",
					"display(df)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 11) Land, ingest, and refine additional data sets (day 1)\r\n",
					"# These data sets demonstrate the 2 other types of batch data - additive and snapshot.\r\n",
					"data = requests.get('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/day1/studentattendance/part1.csv').text\r\n",
					"oea.land(data, 'contoso/v0.1/studentattendance', 'part1.csv', oea.ADDITIVE_BATCH_DATA)\r\n",
					"data = requests.get('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/day1/studentsectionmark/part1.csv').text\r\n",
					"oea.land(data, 'contoso/v0.1/studentsectionmark', 'part1.csv', oea.SNAPSHOT_BATCH_DATA)\r\n",
					"\r\n",
					"oea.ingest(f'contoso/v0.1/studentattendance', 'id')\r\n",
					"oea.ingest(f'contoso/v0.1/studentsectionmark', 'id')\r\n",
					"\r\n",
					"oea.refine('contoso/v0.1/studentattendance', metadata['studentattendance'], 'id')\r\n",
					"oea.refine('contoso/v0.1/studentsectionmark', metadata['studentsectionmark'], 'id')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 12) Land, ingest, and refine additional data sets (day 2)\r\n",
					"# These data sets demonstrate the 2 other types of batch data - additive and snapshot.\r\n",
					"data = requests.get('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/day2/studentattendance/part1.csv').text\r\n",
					"oea.land(data, 'contoso/v0.1/studentattendance', 'part1.csv', oea.ADDITIVE_BATCH_DATA)\r\n",
					"data = requests.get('https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/framework/test_data/contoso_sis/day2/studentsectionmark/part1.csv').text\r\n",
					"oea.land(data, 'contoso/v0.1/studentsectionmark', 'part1.csv', oea.SNAPSHOT_BATCH_DATA)\r\n",
					"\r\n",
					"oea.ingest(f'contoso/v0.1/studentattendance', 'id')\r\n",
					"oea.ingest(f'contoso/v0.1/studentsectionmark', 'id')\r\n",
					"\r\n",
					"oea.refine('contoso/v0.1/studentattendance', metadata['studentattendance'], 'id')\r\n",
					"oea.refine('contoso/v0.1/studentsectionmark', metadata['studentsectionmark'], 'id')"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 12) Reset this example\n",
					"oea.delete_dataset('xporter/3281101')\n",
					"oea.drop_lake_db('ldb_oeadev_s2i_xporter')\n",
					"oea.drop_lake_db('ldb_oeadev_s2r_xporter')"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Appendix"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# You can list the contents of a folder in the data lake like this:\n",
					"print(oea.ls('stage1/Transactional/contoso/v0.1/students/delta_batch_data'))\n",
					"print(oea.ls('stage2/Ingested/contoso/v0.1/students'))"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dtbl = DeltaTable.forPath(spark, oea.to_url('stage2/Refined/contoso/v0.1/sensitive/students_lookup'))\n",
					"display(dtbl.toDF())\n",
					"#dtbl.delete(\"rundate > '2022-11-04T14:39:51'\")"
				]
			}
		]
	}
}